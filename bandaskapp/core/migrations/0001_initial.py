# Generated by Django 4.2.7 on 2025-08-09 18:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Relay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Relay name (e.g., Furnace)", max_length=50
                    ),
                ),
                (
                    "circuit_id",
                    models.CharField(
                        help_text="EVOK circuit ID", max_length=20, unique=True
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        blank=True, help_text="Purpose description", max_length=100
                    ),
                ),
                (
                    "current_state",
                    models.BooleanField(
                        default=False, help_text="Current relay state (ON/OFF)"
                    ),
                ),
                (
                    "expected_state",
                    models.BooleanField(
                        default=False, help_text="Expected relay state"
                    ),
                ),
                (
                    "last_change",
                    models.DateTimeField(auto_now=True, help_text="Last state change"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Relay is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "relays",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "control_mode",
                    models.CharField(
                        choices=[
                            ("automatic", "Automatic Mode"),
                            ("manual", "Manual Mode"),
                        ],
                        default="automatic",
                        help_text="System control mode",
                        max_length=20,
                    ),
                ),
                (
                    "furnace_running",
                    models.BooleanField(
                        default=False, help_text="Furnace is currently running"
                    ),
                ),
                (
                    "dhw_temp_low",
                    models.FloatField(
                        default=45.0, help_text="DHW low temperature threshold (째C)"
                    ),
                ),
                (
                    "dhw_temp_high",
                    models.FloatField(
                        default=60.0, help_text="DHW high temperature threshold (째C)"
                    ),
                ),
                ("last_update", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "system_state",
            },
        ),
        migrations.CreateModel(
            name="TemperatureSensor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Sensor name (e.g., DHW-1)", max_length=50
                    ),
                ),
                (
                    "circuit_id",
                    models.CharField(
                        help_text="EVOK circuit ID", max_length=20, unique=True
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Physical location", max_length=50
                    ),
                ),
                (
                    "current_value",
                    models.FloatField(
                        blank=True, help_text="Current temperature in 째C", null=True
                    ),
                ),
                (
                    "last_reading",
                    models.DateTimeField(
                        blank=True, help_text="Last successful reading", null=True
                    ),
                ),
                (
                    "is_lost",
                    models.BooleanField(
                        default=False, help_text="Sensor communication lost"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Sensor is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "temperature_sensors",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                        ],
                        help_text="Log level",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(help_text="Log message")),
                (
                    "component",
                    models.CharField(
                        blank=True, help_text="System component", max_length=50
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "system_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["level", "-timestamp"],
                        name="system_logs_level_837293_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="TemperatureLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.FloatField(help_text="Temperature value in 째C")),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "sensor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.temperaturesensor",
                    ),
                ),
            ],
            options={
                "db_table": "temperature_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["sensor", "-timestamp"],
                        name="temperature_sensor__bd2214_idx",
                    )
                ],
            },
        ),
    ]
